<!DOCTYPE html>
<html>
<head>
    <title>Text Messaging - Sister Missionary Meals</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <!-- Load custom CSS but override modal conflicts -->
    <link rel="stylesheet" href="/css/style.css">
    <style>
        /* Override custom modal styles to prevent Bootstrap conflicts */
        .modal {
            display: none !important; /* Let Bootstrap handle display */
        }
        .modal.show {
            display: block !important; /* Allow Bootstrap to show */
        }
        .modal.fade {
            display: none !important;
        }
        .modal.fade.show {
            display: block !important;
        }
        /* Ensure Bootstrap modal backdrop works */
        .modal-backdrop {
            z-index: 1040;
        }
        .modal {
            z-index: 1050;
        }
        /* Ensure form elements are interactive */
        .modal input, .modal textarea, .modal select, .modal button {
            pointer-events: auto !important;
        }
    </style>
</head>
<body>
    <div class="container mt-4">
        
        <!-- Navigation -->
        <%- include('../partials/navigation', { activePage: 'text' }) %>

        <div class="row">
            <div class="col-12">
                <h1><i class="fas fa-sms"></i> Text Messaging Dashboard</h1>
                
                <% if (!notificationStatus.anyMethodAvailable) { %>
                    <div class="alert alert-warning">
                        <i class="fas fa-exclamation-triangle"></i>
                        <strong>No Messaging Services Configured:</strong> Neither Twilio SMS nor Email-to-SMS is set up.
                        <br><small>Configure one of these options in your environment variables to enable messaging.</small>
                    </div>
                <% } else { %>
                    <!-- SMS System Status Notice -->
                    <div class="alert alert-info border-primary">
                        <h5 class="alert-heading">
                            <i class="fas fa-mobile-alt"></i> SMS Opt-In System
                        </h5>
                        <p class="mb-2">
                            <strong>Users can now opt-in to receive SMS notifications when our automated system goes live.</strong>
                        </p>
                        <p class="mb-2">
                            <strong>Important Notice:</strong> We are currently working on implementing a fully compliant SMS notification system 
                            that meets all telecommunications regulations and privacy requirements.
                        </p>
                        <p class="mb-2">
                            <strong>Current Status:</strong> While families can opt-in to SMS notifications through this system, 
                            the automated text messaging is still in development.
                        </p>
                        <div class="bg-light p-3 rounded mb-3">
                            <strong>Temporary Process:</strong>
                            <ul class="mb-0 mt-2">
                                <li><strong>When families sign up for meals:</strong> They must manually text the sister missionaries with meal details (date, time, delivery preference, contact info)</li>
                                <li>Sister missionaries will be notified about meal assignments <strong>manually via text message</strong> for now</li>
                                <li>This opt-in system is collecting consent for when automated messaging goes live</li>
                            </ul>
                        </div>
                    </div>
                <% } %>
                
                <!-- SMS Opt-In Actions -->
                <div class="alert alert-primary">
                    <h5 class="alert-heading"><i class="fas fa-check-circle"></i> SMS Opt-In & Opt-Out</h5>
                    <div class="d-flex gap-2 mb-3">
                        <a href="/text/opt-in" class="btn btn-success btn-sm">
                            <i class="fas fa-check"></i> SMS Opt-In Page
                        </a>
                        <a href="/text/opt-out" class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-times"></i> SMS Opt-Out Page
                        </a>
                    </div>
                    <small class="text-muted">
                        <i class="fas fa-shield-alt"></i> 
                        Share these opt-in links with families and missionaries to prepare for automated notifications.
                    </small>
                </div>
            </div>
        </div>

        <div class="row">
            <!-- Quick Actions -->
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-bolt"></i> Quick Actions (Manual Process)</h5>
                    </div>
                    <div class="card-body">
                        <div class="alert alert-warning alert-sm mb-3">
                            <small>
                                <i class="fas fa-hand-paper"></i> 
                                <strong>Note:</strong> These buttons are for testing purposes. 
                                Please send notifications manually until the automated system is complete.
                            </small>
                        </div>
                        <button class="btn btn-outline-primary mb-2 w-100" onclick="showVolunteerRequestModal()">
                            <i class="fas fa-hand-paper"></i> Test Volunteer Request (Manual Send Required)
                        </button>
                        <button class="btn btn-outline-info mb-2 w-100" onclick="showCustomMessageModal()">
                            <i class="fas fa-edit"></i> Test Custom Message (Manual Send Required)
                        </button>
                        <hr>
                        <small class="text-muted">
                            <strong>Manual Process:</strong><br>
                            1. Use these tools to compose messages<br>
                            2. Copy the message text<br>
                            3. Send manually via your personal phone
                        </small>
                    </div>
                </div>
            </div>

            <!-- Upcoming Meals -->
            <div class="col-md-6">
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-calendar-alt"></i> Upcoming Meals</h5>
                    </div>
                    <div class="card-body" style="max-height: 400px; overflow-y: auto;">
                        <% if (upcomingMeals.length === 0) { %>
                            <p class="text-muted">No upcoming meals scheduled.</p>
                        <% } else { %>
                            <% upcomingMeals.forEach(meal => { %>
                                <div class="meal-item mb-3 p-3 border rounded">
                                    <div class="d-flex justify-content-between align-items-start">
                                        <div>
                                            <strong><%= new Date(meal.date).toLocaleDateString() %></strong>
                                            <br>
                                            <small class="text-muted">
                                                <%= meal.companionship.missionaries.map(m => m.fullName).join(' & ') %>
                                            </small>
                                            <% if (meal.family) { %>
                                                <br>
                                                <span class="badge bg-success">Assigned: <%= meal.family.familyName %></span>
                                            <% } else { %>
                                                <br>
                                                <span class="badge bg-warning">Unassigned</span>
                                            <% } %>
                                        </div>
                                        <div class="btn-group-vertical">
                                            <% if (meal.family) { %>
                                                <button class="btn btn-sm btn-outline-primary mb-1" 
                                                        onclick="remindFamily('<%= meal._id %>')"
                                                        title="Generate reminder text (send manually)">
                                                    <i class="fas fa-bell"></i> Create Family Reminder
                                                </button>
                                            <% } %>
                                            <button class="btn btn-sm btn-outline-info" 
                                                    onclick="notifyMissionaries('<%= meal._id %>')"
                                                    title="Generate notification text (send manually)">
                                                <i class="fas fa-envelope"></i> Create Missionary Notice
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            <% }); %>
                        <% } %>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Volunteer Request Modal -->
    <div class="modal fade" id="volunteerModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Request Meal Volunteers</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form onsubmit="requestVolunteers(event)">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Date Range Start</label>
                            <input type="date" class="form-control" name="dateStart" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Date Range End</label>
                            <input type="date" class="form-control" name="dateEnd" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Custom Message (Optional)</label>
                            <textarea class="form-control" name="message" rows="3" 
                                      placeholder="Leave blank for default message"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Send Request</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Custom Message Modal -->
    <div class="modal fade" id="customMessageModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Send Custom Message</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form onsubmit="sendCustomMessage(event)">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">Recipients (Phone Numbers)</label>
                            <textarea class="form-control" name="recipients" rows="2" 
                                      placeholder="Enter phone numbers separated by commas (e.g., 555-1234, 555-5678)" 
                                      required></textarea>
                            <small class="text-muted">Separate multiple numbers with commas</small>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Message</label>
                            <textarea class="form-control" name="message" rows="4" 
                                      placeholder="Enter your message here..." 
                                      required></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Send Message</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function showVolunteerRequestModal() {
            new bootstrap.Modal(document.getElementById('volunteerModal')).show();
        }

        function showCustomMessageModal() {
            new bootstrap.Modal(document.getElementById('customMessageModal')).show();
        }

        async function remindFamily(mealId) {
            try {
                const response = await fetch(`/text/remind-family/${mealId}`, {
                    method: 'POST'
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('warning', '⚠️ Reminder text generated! MANUAL ACTION REQUIRED: Please copy this message and send it manually via text message to the family. Automated SMS is coming soon!');
                } else {
                    showAlert('error', result.error || 'Failed to generate reminder');
                }
            } catch (error) {
                showAlert('error', 'Error generating reminder');
            }
        }

        async function notifyMissionaries(mealId) {
            try {
                const response = await fetch(`/text/notify-missionaries/${mealId}`, {
                    method: 'POST'
                });
                const result = await response.json();
                
                if (result.success) {
                    showAlert('warning', '⚠️ Notification text generated! MANUAL ACTION REQUIRED: Please copy this message and send it manually via text message to the missionaries. Automated SMS is coming soon!');
                } else {
                    showAlert('error', result.error || 'Failed to generate notification');
                }
            } catch (error) {
                showAlert('error', 'Error generating notification');
            }
        }

        async function requestVolunteers(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const data = {
                dateStart: formData.get('dateStart'),
                dateEnd: formData.get('dateEnd'),
                message: formData.get('message')
            };

            try {
                const response = await fetch('/text/request-volunteers', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('warning', '⚠️ Volunteer request messages generated! MANUAL ACTION REQUIRED: Please copy these messages and send them manually to families via text message. Automated SMS is coming soon!');
                    bootstrap.Modal.getInstance(document.getElementById('volunteerModal')).hide();
                    event.target.reset();
                } else {
                    showAlert('error', result.error || 'Failed to generate volunteer request');
                }
            } catch (error) {
                showAlert('error', 'Error generating volunteer request');
            }
        }

        async function sendCustomMessage(event) {
            event.preventDefault();
            
            const formData = new FormData(event.target);
            const data = {
                recipients: formData.get('recipients'),
                message: formData.get('message')
            };

            try {
                const response = await fetch('/text/custom', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(data)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    showAlert('warning', '⚠️ Custom message generated! MANUAL ACTION REQUIRED: Please copy this message and send it manually via text message to the recipients. Automated SMS is coming soon!');
                    bootstrap.Modal.getInstance(document.getElementById('customMessageModal')).hide();
                    event.target.reset();
                } else {
                    showAlert('error', result.error || 'Failed to generate message');
                }
            } catch (error) {
                showAlert('error', 'Error generating message');
            }
        }

        function showAlert(type, message) {
            // Remove existing alerts
            const existingAlerts = document.querySelectorAll('.alert-dismissible');
            existingAlerts.forEach(alert => alert.remove());
            
            // Map alert types to Bootstrap classes
            const alertClass = type === 'success' ? 'success' : 
                              type === 'warning' ? 'warning' : 'danger';
            const iconClass = type === 'success' ? 'check-circle' : 
                             type === 'warning' ? 'exclamation-triangle' : 'exclamation-circle';
            
            // Create new alert
            const alert = document.createElement('div');
            alert.className = `alert alert-${alertClass} alert-dismissible fade show`;
            alert.innerHTML = `
                <i class="fas fa-${iconClass}"></i>
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            `;
            
            // Insert at top of container
            const container = document.querySelector('.container');
            container.insertBefore(alert, container.firstChild);
            
            // Auto-remove after 8 seconds for warnings, 5 for others
            setTimeout(() => {
                if (alert.parentElement) {
                    alert.remove();
                }
            }, type === 'warning' ? 8000 : 5000);
        }
    </script>
</body>
</html>
